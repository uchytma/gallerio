@page "/galleries/{GalleryId}"
@using Gallerio.Api.Dtos
@using Gallerio.Web.Client.Services.LayoutConfiguration
@inject HttpClient Http
@inject ILayoutConfigurationService _layoutConfigurationService
@inject Gallerio.Web.Client.Services.Breadcrumbs.IBreadcrumbsProvider _breadcrumbsProvider
@inject NavigationManager _navManager
@inject IJSRuntime JsRuntime
@implements IDisposable

@if (_gallery == null)
{
    <p><em>Načítám...</em></p>
}
else
{
    <div id="grid-container">
        <div id="grid-container-list">
            @if (_multimedia == null)
            {
                <p><em>Načítám...</em></p>
            }
            else
            {
                <div>
                    @for (int i = 0; i < _multimedia.Count(); i++)
                    {
                        var index = i;
                        var mi = _multimedia[index];
                        <div class="card m-2 @(mi == _selectedMultimedia ? "selected" : null)" @onclick="() => ShowMultimedia(index)">
                            <div class="card-body p-2">
                                <p class="card-title">@mi.PartialPath</p>
                                <p class="card-subtitle text-muted">@mi.CaptureDateTime.ToString("dd.MM.yyyy HH:mm")</p>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
        <div id="grid-container-image" class="d-flex align-items-center justify-content-center">
            @if (_selectedMultimediaUrlSrc is null)
            {
                <p class="text-muted">Vyberte multimedia v seznamu vlevo.</p>
            }
            else
            {

                <img src="@_selectedMultimediaUrlSrc">
            }
        </div>
        <div id="grid-container-meta" class="p-2">
            @if (_selectedMultimedia is not null)
            {
                <div class="d-flex grid-container-meta-tags">
                    @foreach (var tag in _tags ?? Enumerable.Empty<string>())
                    {
                        <span @onclick="() => RemoveTag(tag)" class="badge bg-success">
                            <span class="align-middle">@tag</span>
                        </span>
                    }

                    <div class="input-group input-group-sm">
                        <input @bind="_addTagValue" type="text" class="form-control">
                        <button @onclick='() => AddTag(_addTagValue)' class="btn btn-outline-secondary" type="button" id="button-addon2">Přidat tag</button>
                    </div>

                </div>
            }
        </div>
        <div id="grid-container-controls" class="d-flex justify-content-center align-items-center">
            <div @onclick="() => NavigateLeft()" class="d-flex justify-content-center align-items-center"><span class="oi oi-caret-left" aria-hidden="true"></span></div>
            <div @onclick="() => NavigateRight()" class="d-flex justify-content-center align-items-center"><span class="oi oi-caret-right" aria-hidden="true"></span></div>
        </div>
    </div>
}



@code {
    private const string _addTagDefaultValue = "TOP";

    private string? _addTagValue = _addTagDefaultValue;

    private GalleryDto? _gallery;

    private MultimediaItemDto[]? _multimedia;

    private string? _selectedMultimediaUrlSrc = null;

    private MultimediaItemDto? _selectedMultimedia = null;

    private int? _selectedMultimediaIndex = null;

    private IEnumerable<string>? _tags = null;

    [Parameter]
    public string? GalleryId { get; set; }

    public async Task AddTag(string tag)
    {
        if (_selectedMultimedia == null || _selectedMultimediaIndex == null) return;
       
        var tagsResponse = await Http.PostAsJsonAsync<AddTag>($"https://localhost:7173/api/gallery/{GalleryId}/multimedia/{_selectedMultimedia.Id}/tags", new Api.Dtos.AddTag(tag));
        if (!tagsResponse.IsSuccessStatusCode) {
            if (tagsResponse.StatusCode == System.Net.HttpStatusCode.Conflict) {
                await JsRuntime.InvokeVoidAsync("alert", "Tag již existuje!");
                return;
            }
            throw new ApplicationException("Chyba uložení tagu.");
        }
        await ShowMultimedia(_selectedMultimediaIndex.Value);
        _addTagValue = _addTagDefaultValue;
    }

    public async Task RemoveTag(string tag)
    {
        if (_selectedMultimedia == null || _selectedMultimediaIndex == null) return;
        var tagsResponse = await Http.DeleteAsync($"https://localhost:7173/api/gallery/{GalleryId}/multimedia/{_selectedMultimedia.Id}/tags/{tag}");
        if (!tagsResponse.IsSuccessStatusCode) throw new ApplicationException("Chyba odstranění tagu.");
        await ShowMultimedia(_selectedMultimediaIndex.Value);
    }

    public async Task NavigateLeft()
    {
        if (_selectedMultimediaIndex == null || _selectedMultimediaIndex == 0) return;
        await ShowMultimedia(_selectedMultimediaIndex.Value - 1);
    }

    public async Task NavigateRight()
    {
        if (_selectedMultimediaIndex == null || _multimedia == null || _selectedMultimediaIndex == _multimedia.Count() - 1) return;
        await ShowMultimedia(_selectedMultimediaIndex.Value + 1);
    }

    public async Task ShowMultimedia(int index)
    {
        _selectedMultimediaIndex = index;
        _selectedMultimedia = _multimedia![index];
        _selectedMultimediaUrlSrc = $"https://localhost:7173/api/gallery/{GalleryId}/multimedia/{_selectedMultimedia.Id}/raw";
        var tagsResponse = await Http.GetFromJsonAsync<MultimediaItemTagsDto>($"https://localhost:7173/api/gallery/{GalleryId}/multimedia/{_selectedMultimedia.Id}/tags");
        if (tagsResponse != null && tagsResponse.Tags != null)
        {
            _tags = tagsResponse.Tags;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var getGalleryRq = Http.GetFromJsonAsync<GalleryDto>($"https://localhost:7173/api/gallery/{GalleryId}");
        var getMultimediaRq = Http.GetFromJsonAsync<MultimediaItemDto[]>($"https://localhost:7173/api/gallery/{GalleryId}/multimedia");

        _gallery = await getGalleryRq;

        _breadcrumbsProvider.Clear();
        _breadcrumbsProvider.Push(new Services.Breadcrumbs.BreadcrumbLink("/", "Home", true));
        _breadcrumbsProvider.Push(new Services.Breadcrumbs.BreadcrumbLink("/Galleries", "Galerie", true));
        _breadcrumbsProvider.Push(new Services.Breadcrumbs.BreadcrumbLink($"/Galleries/{_gallery!.Id}", _gallery!.Name, false));

        _layoutConfigurationService.NoPadding = true;

        StateHasChanged();

        _multimedia = await getMultimediaRq;
    }

    public void Dispose()
    {
        _layoutConfigurationService.NoPadding = false;
    }
}
